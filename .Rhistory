## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL  # initialize inverse as NULL
set <- function(y) {
x <<- y       # assign new matrix value
inv <<- NULL  # reset inverse cache
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)  # return cached inverse
}
data <- x$get()
inv <- solve(data, ...)  # compute inverse
x$setinverse(inv)        # cache the inverse
inv
}
